/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UniqueIdImport } from './routes/unique/$id'

// Create Virtual Routes

const UniqueLazyImport = createFileRoute('/unique')()
const ContentLazyImport = createFileRoute('/content')()
const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const UniqueLazyRoute = UniqueLazyImport.update({
  path: '/unique',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/unique.lazy').then((d) => d.Route))

const ContentLazyRoute = ContentLazyImport.update({
  path: '/content',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/content.lazy').then((d) => d.Route))

const AboutLazyRoute = AboutLazyImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const UniqueIdRoute = UniqueIdImport.update({
  path: '/$id',
  getParentRoute: () => UniqueLazyRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/content': {
      id: '/content'
      path: '/content'
      fullPath: '/content'
      preLoaderRoute: typeof ContentLazyImport
      parentRoute: typeof rootRoute
    }
    '/unique': {
      id: '/unique'
      path: '/unique'
      fullPath: '/unique'
      preLoaderRoute: typeof UniqueLazyImport
      parentRoute: typeof rootRoute
    }
    '/unique/$id': {
      id: '/unique/$id'
      path: '/$id'
      fullPath: '/unique/$id'
      preLoaderRoute: typeof UniqueIdImport
      parentRoute: typeof UniqueLazyImport
    }
  }
}

// Create and export the route tree

interface UniqueLazyRouteChildren {
  UniqueIdRoute: typeof UniqueIdRoute
}

const UniqueLazyRouteChildren: UniqueLazyRouteChildren = {
  UniqueIdRoute: UniqueIdRoute,
}

const UniqueLazyRouteWithChildren = UniqueLazyRoute._addFileChildren(
  UniqueLazyRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/content': typeof ContentLazyRoute
  '/unique': typeof UniqueLazyRouteWithChildren
  '/unique/$id': typeof UniqueIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/content': typeof ContentLazyRoute
  '/unique': typeof UniqueLazyRouteWithChildren
  '/unique/$id': typeof UniqueIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/content': typeof ContentLazyRoute
  '/unique': typeof UniqueLazyRouteWithChildren
  '/unique/$id': typeof UniqueIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/content' | '/unique' | '/unique/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/content' | '/unique' | '/unique/$id'
  id: '__root__' | '/' | '/about' | '/content' | '/unique' | '/unique/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AboutLazyRoute: typeof AboutLazyRoute
  ContentLazyRoute: typeof ContentLazyRoute
  UniqueLazyRoute: typeof UniqueLazyRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AboutLazyRoute: AboutLazyRoute,
  ContentLazyRoute: ContentLazyRoute,
  UniqueLazyRoute: UniqueLazyRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/content",
        "/unique"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/content": {
      "filePath": "content.lazy.tsx"
    },
    "/unique": {
      "filePath": "unique.lazy.tsx",
      "children": [
        "/unique/$id"
      ]
    },
    "/unique/$id": {
      "filePath": "unique/$id.tsx",
      "parent": "/unique"
    }
  }
}
ROUTE_MANIFEST_END */
